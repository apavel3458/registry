exports.up = knex => {
    return knex.schema
      .createTable('users', table => {
        table.increments('id').primary();
        table.string('firstName');
        table.string('lastName');
        table.string('email');
        table.string('password');
        table.integer('loginCount').defaultTo(0)
        table.integer('loginAttempts').defaultTo(0)
        table.datetime('lastLogin').defaultTo(null)
        table.boolean('active').defaultTo(true)
        table.timestamp('createdAt').defaultTo(knex.fn.now())
      })
      .createTable('usergroups', table => {
        table.increments('id').primary()
        table.string('groupName')
        table.unique('groupName')
      })
      .createTable('usergrouplink', table => {
        table.increments('id').primary();
        table
          .integer('userId')
          .unsigned()
          .references('id')
          .inTable('users')
          .onDelete('CASCADE');
        table
          .integer('usergroupId')
          .unsigned()
          .references('id')
          .inTable('usergroups')
          .onDelete('CASCADE');
      })
      .createTable('registries', table => {
        table.increments('id').primary()
        table.string('registryName')
        table.string('prefix')
        table.string('shortName')
        table.string('color')
        table.unique('registryName')
      })
      .createTable('patients', table => {
        table.increments('id').primary()
        table
          .integer('registryId')
          .unsigned()
          .references('id').inTable('registries')
          .onDelete('SET NULL')
          .index()
        table.string('lastName')
        table.string('firstName')
        table.string('mrn')
        table.date('dob')
        table.date('deceasedDate')
        table.string('causeOfDeath')
        table.string('updatedBy')
        table.string('createdBy')
        table.timestamp('updatedAt').defaultTo(knex.fn.now())
        table.timestamp('createdAt').defaultTo(knex.fn.now())
      })
      .createTable('diseases', table => {
        table.increments('id').primary()
        table.string("diseaseName")
      })
      .createTable('diagnoses', table => {
        table.increments('id').primary()
        table
          .integer('patientId')
          .unsigned()
          .references('id').inTable('patients')
          .onDelete('CASCADE')
          .index()
        table.string('diagnosisName')
        table.string('dateStart')
        table.string('dateEnd')
        table.string('treatingPhysician')
        table.boolean('biopsyProven')
        table.text('comments')
        table.json('details')
        table.string('updatedBy')
        table.timestamp('updatedAt').defaultTo(knex.fn.now())
        table.timestamp('createdAt').defaultTo(knex.fn.now())
      })
      .createTable('imaging', table => {
        table.increments('id').primary()
        table
        .integer('patientId')
        .unsigned()
        .references('id').inTable('patients')
        .onDelete('CASCADE')
        .index()
        table.string('imagingName')
        table.date('studyDate')
        table.decimal('EF', 4, 1)
        table.string('EFtext')
        table.string('visibleDetail')
        table.text('comments')
        table.json('details')
        table.string('updatedBy')
        table.timestamp('updatedAt').defaultTo(knex.fn.now())
        table.timestamp('createdAt').defaultTo(knex.fn.now())
      })
      .createTable('events', table => {
        table.increments('id').primary()
        table
        .integer('patientId')
        .unsigned()
        .references('id').inTable('patients')
        .onDelete('CASCADE')
        .index()
        table.string('eventName')
        table.date('eventDate')
        table.string('visibleDetail')
        table.text('comments')
        table.json('details')
        table.string('updatedBy')
        table.timestamp('updatedAt').defaultTo(knex.fn.now())
        table.timestamp('createdAt').defaultTo(knex.fn.now())
      })
      .createTable('treatments', table => {
        table.increments('id').primary()
        table
        .integer('patientId')
        .unsigned()
        .references('id').inTable('patients')
        .onDelete('CASCADE')
        .index()
        table.date('treatmentDate')
        table.date('treatmentEndDate')
        table.string('treatmentName')
        table.integer('dose')
        table.string('unit')
        table.text('comments')
        table.json('details')
        table.string('updatedBy')
        table.timestamp('updatedAt').defaultTo(knex.fn.now())
        table.timestamp('createdAt').defaultTo(knex.fn.now())
      })
      .createTable('devices', table => {
        table.increments('id').primary()
        table
        .integer('patientId')
        .unsigned()
        .references('id').inTable('patients')
        .onDelete('CASCADE')
        .index()
        table.string('deviceName')
        table.date('implantDate')
        table.date('explantDate')
        table.string('visibleDetail')
        table.text('comments')
        table.json('details')
        table.string('updatedBy')
        table.timestamp('updatedAt').defaultTo(knex.fn.now())
        table.timestamp('createdAt').defaultTo(knex.fn.now())
      })
      .createTable('medications', table => {
        table.increments('id').primary()
        table
        .integer('patientId')
        .unsigned()
        .references('id').inTable('patients')
        .onDelete('CASCADE')
        .index()
        table.string('medicationName')
        table.string('class')
        table.integer('dose')
        table.string('unit')
        table.date('startDate')
        table.date('endDate')
        table.string('visibleDetail')
        table.text('comments')
        table.json('details')
        table.string('updatedBy')
        table.timestamp('updatedAt').defaultTo(knex.fn.now())
        table.timestamp('createdAt').defaultTo(knex.fn.now())
      })
  };

  
  exports.down = knex => {
    return knex.schema
      .dropTableIfExists('medications')
      .dropTableIfExists('treatments')
      .dropTableIfExists('devices')
      .dropTableIfExists('events')
      .dropTableIfExists('imaging')
      .dropTableIfExists('diagnoses')
      .dropTableIfExists('diseases')
      .dropTableIfExists('patients')
      .dropTableIfExists('usergrouplink')
      .dropTableIfExists('registries')
      .dropTableIfExists('usergroups')
      .dropTableIfExists('users') 
  };